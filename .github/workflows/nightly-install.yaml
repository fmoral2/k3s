name: Nightly Install
on:
  push: {}
#  schedule:
#    - cron: "0 0 * * 1-5"
#  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  test:
    name: "Smoke Test"
    runs-on: ubuntu-latest
    timeout-minutes: 40
    strategy:
      fail-fast: false
      matrix:
        channel: [stable, latest]
        vm: [rocky-8, fedora, opensuse-leap, ubuntu-2204]
      max-parallel: 4
#    defaults:
#      run:
#        working-directory: tests/install/${{ matrix.vm }}
    env:
      INSTALL_K3S_CHANNEL: ${{ matrix.channel }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
        with: {fetch-depth: 1}
#      - name: Set up vagrant and libvirt
#        uses: ./.github/actions/vagrant-setup
#      - name: "Vagrant Cache"
#        uses: actions/cache@v4
#        with:
#          path: |
#             ~/.vagrant.d/boxes
#          key: vagrant-box-${{ matrix.vm }}
#        id: vagrant-cache
#      - name: "Vagrant Plugin(s)"
#        run: vagrant plugin install vagrant-k3s vagrant-reload
#      - name: "Vagrant Up ⏩ Install K3s"
#        run: vagrant up
#      - name: "⏳ Node"
#        run: vagrant provision --provision-with=k3s-wait-for-node
#      - name: "⏳ CoreDNS"
#        run: vagrant provision --provision-with=k3s-wait-for-coredns
#      - name: "⏳ Local Storage"
#        run: vagrant provision --provision-with=k3s-wait-for-local-storage
#        continue-on-error: true
#      - name: "⏳ Metrics Server"
#        run: vagrant provision --provision-with=k3s-wait-for-metrics-server
#        continue-on-error: true
#      - name: "⏳ Traefik"
#        run: vagrant provision --provision-with=k3s-wait-for-traefik
#        continue-on-error: true
#      - name: "k3s-status"
#        run: vagrant provision --provision-with=k3s-status
#      - name: "k3s-procps"
#        run: vagrant provision --provision-with=k3s-procps

      - name: Create Qase Run
        id: qase
        env:
          QASE_API_TOKEN: ${{ secrets.QASE_API_TOKEN }}
        run: |
          sudo apt-get install jq
          # create a QASE_RUN_NAME DINAMICALLY
          QASE_RUN_NAME="Install K3s on ${{ matrix.vm }}"
          
          # create a run ID
          RESPONSE=$(curl --request POST \
          --url https://api.qase.io/v1/run/DEMO \
          --header 'Token: $QASE_API_TOKEN' \
          --header 'accept: application/json' \
          --header 'content-type: application/json' \
          --data '
            {
              "cases": [
                          0,
                          1
                       ],
              "is_autotest": true,
              "title": "'"$QASE_RUN_NAME"'",
            }'
            )
          
            # set the run ID as an output variable
            RUN_ID=$(echo $RESPONSE | jq -r '.result.id')
          
            # Print the RUN_ID to verify
            echo "The RUN_ID is: $RUN_ID"
            
            # Set the run ID as an output variable using the environment file
              echo "QASE_RUN_ID=$RUN_ID" >> $GITHUB_ENV
          
          ## step
          
          
          # complete the run
          COMPLETE_RUN=$(curl --request POST \
            --url https://api.qase.io/v1/run/K3SRKE2/$RUN_ID/complete \
            --header 'Token: $QASE_API_TOKEN' \
            --header 'accept: application/json'
            )

            RUN_STATUS=$(echo $COMPLETE_RUN | jq -r '.status')
              if [[ $RUN_STATUS != true ]]; then
                echo "Failed to complete the run"
              fi

#          # make run public
#            PUBLISH_RUN=$(curl --request PATCH \
#            --url https://api.qase.io/v1/run/K3SRKE2/$RUN_ID/public \
#            --header 'Token: $QASE_API_TOKEN' \
#            --header 'accept: application/json' \
#            --header 'content-type: application/json' \
#            --data '{"status":true}'
#            )
#
#          REPORT_URL=$(echo $PUBLISH_RUN | jq -r '.result.url')
#          if [[ -n "${REPORT_URL}" ]]; then
#            echo report url: ${REPORT_URL}
#            echo "## QASE Reporting" >> ${GITHUB_STEP_SUMMARY}
#            echo "Public Qase report: ${REPORT_URL}" >> ${GITHUB_STEP_SUMMARY}
#          fi

      - name: Run Tests and Upload Results to Qase
        env:
          QASE_API_TOKEN: ${{ secrets.QASE_API_TOKEN }}
          QASE_RUN_ID: ${{ env.QASE_RUN_ID }}
        run: |
          echo "Run K3s Smoke Test"
           #Example: ./run-tests.sh and capture results in a file, e.g., test-results.json
          ./run-tests.sh > test-results.json

 
          
  

